call plug#begin('~/.vim/plugged')

" Plug 'vim-syntastic/syntastic'
" Plug 'altercation/vim-colors-solarized'
" Plug 'scrooloose/nerdcommenter'
" Plug 'ervandew/supertab'
Plug 'tpope/vim-vinegar'

" Tmux
Plug 'christoomey/vim-tmux-navigator'
Plug 'benmills/vimux'

" General

" Devel
Plug 'vim-scripts/SyntaxComplete'
Plug 'vim-scripts/XSLT-syntax'
Plug 'plasticboy/vim-markdown'
Plug 'tpope/vim-git'
Plug 'docker/docker' , {'rtp': '/contrib/syntax/vim/'}
Plug 'dag/vim-fish'
Plug 'elzr/vim-json'
Plug 'stephpy/vim-yaml'
Plug 'lfilho/cosco.vim'

" Web
Plug 'othree/html5.vim'
Plug 'JulesWang/css.vim'
Plug 'digitaltoad/vim-pug'
Plug 'groenewege/vim-less'
Plug 'wavded/vim-stylus'

" Python
Plug 'mitsuhiko/vim-python-combined'
Plug 'aliev/vim-compiler-python'

" Ruby
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'sheerun/vim-yardoc'

" PHP
Plug 'StanAngeloff/php.vim'
Plug 'mxw/vim-xhp'

" Javascript
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'glanotte/vim-jasmine'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'leafgarland/typescript-vim'
Plug 'othree/yajs.vim'
" Plug 'moll/vim-node'


" Plug 'wookiehangover/jshint.vim'
" Lint engine
" Plug 'w0rp/ale'

Plug 'henrik/vim-indexed-search'
" Plug 'janko-m/vim-test'
" Plug 'skywind3000/asyncrun.vim'
Plug 'victormours/better-writing.vim'
" Plug 'vim-scripts/CursorLineCurrentWindow'
" Plug 'yegappan/mru'
Plug 'tpope/vim-repeat'
Plug 'mattn/emmet-vim'
" Plug 'csscomb/vim-csscomb'
" Plug 'vim-scripts/matchit.zip'
Plug 'othree/xml.vim'
" Plug 'alvan/vim-closetag'
" Plug '1995eaton/vim-better-javascript-completion'
Plug 'AndrewRadev/splitjoin.vim'
" Plug 'kana/vim-textobj-user'
Plug 'tpope/vim-speeddating'
" Plug 'vim-scripts/ConflictMotions'
Plug 'ap/vim-css-color'
" Plug 'skammer/vim-css-color'
" Plug 'godlygeek/tabular'
" Plug 'flowtype/vim-flow'
" Plug 'vim-scripts/Conque-Shell'
" Plug 'Chiel92/vim-autoformat'
" Plug 'scrooloose/syntastic'
" Plug 'ternjs/tern_for_vim'
" Plug 'bling/vim-airline'
Plug 'osyo-manga/vim-anzu'
" Plug 'Valloric/YouCompleteMe'
Plug 'SirVer/ultisnips'
Plug 'mhartington/vim-typings'
" Plug 'Shougo/unite.vim'
Plug 'jason0x43/vim-js-indent'
Plug 'maksimr/vim-jsbeautify'
" Plug 'https://github.com/xolox/vim-easytags.git'
" Plug 'https://github.com/vim-scripts/YankRing.vim.git'
Plug 'craigemery/vim-autotag'
Plug 'majutsushi/tagbar'
Plug 'xolox/vim-misc'
" Plug 'https://github.com/xolox/vim-session.git'
Plug 'airblade/vim-gitgutter'
Plug 'Quramy/vim-js-pretty-template'
Plug 'Quramy/tsuquyomi'
Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'HerringtonDarkholme/yats.vim'
Plug 'Olical/vim-enmasse'
" Plug 'https://github.com/vim-scripts/cscope.vim'
Plug 'vim-scripts/PreserveNoEOL'
Plug 'editorconfig/editorconfig-vim'
Plug 'aperezdc/vim-template'
Plug 'Townk/vim-autoclose'
Plug 'tomtom/tcomment_vim'
" Plug 'git://github.com/tpope/vim-cucumber.git'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
" Plug 'nathanaelkane/vim-indent-guides'
Plug 'flazz/vim-colorschemes'
Plug 'mileszs/ack.vim'
" Plug 'scrooloose/nerdtree'
" Plug 'jistr/vim-nerdtree-tabs'
" Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'othree/jsdoc-syntax.vim'
Plug 'heavenshell/vim-jsdoc'
Plug 'itspriddle/vim-jquery'
Plug 'othree/javascript-libraries-syntax.vim'
" Plug 'othree/jspc.vim'
" Plug 'severin-lemaignan/vim-minimap'
" Plug 'sheerun/vim-polyglot'
Plug 'ctrlpvim/ctrlp.vim'

" Add plugins to &runtimepath
call plug#end()

" Fix for JSON syntax highlighting (vim-json plugin)
hi! def link jsonKeyword Identifier

" CSS - fix vim-css3-syntax highlighiting
setlocal iskeyword+=-
" augroup VimCSS3Syntax
" autocmd!
"   autocmd FileType css setlocal iskeyword+=-
" augroup END



" ================================================
" Emmet Support
" ================================================

" let g:user_emmet_install_global = 0
" let g:user_emmet_mode='a'
autocmd FileType html EmmetInstall


" Write variable s:std_in if arguments for VIM was passed
autocmd StdinReadPre * let s:std_in=1

" Open NERDTree if no arguments were passed to VIM and diff mode is off
autocmd VimEnter * if argc() == 0 && !exists('s:std_in') && !&diff | execute 'windo :Explore' | endif

" ================================================
" Programming Support
" ================================================
" let g:polyglot_disabled = [ 'css',   ]

let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_flow = 1
let g:vim_json_syntax_conceal = 0

let g:syntastic_javascript_checkers = ['eslint']
" Override eslint with local version where necessary.
let local_eslint = finddir('node_modules', '.;') . '/.bin/eslint'
if matchstr(local_eslint, "^\/\\w") == ''
  let local_eslint = getcwd() . "/" . local_eslint
endif
if executable(local_eslint)
  let g:syntastic_javascript_eslint_exec = local_eslint
endif

let g:jsx_ext_required = 0 " Allow JSX in normal JS files

" ================================================
" General
" ================================================
set nocompatible
filetype on
filetype plugin on
filetype indent on
set encoding=utf-8
set spelllang=en
set number
set ruler
set showcmd " show me what I'm typing
set wrap
set splitbelow " opens next horizontal window below current
set mouse=a
set mousemodel=popup
set ignorecase
" autoread file changes
set autoread
set tabstop=2
set shiftwidth=2
set expandtab
" copy to system clipboard
set clipboard+=unnamed
" Hide Vim Intro
set shortmess+=I
" Hightlight Current Line
set cursorline
" Redraw ONLY When Need To
set lazyredraw
" Enable Magic for Regular Expression
set magic
" Treat Long Lines as Break Lines
set ai " auto indent
set si " smart indent
set shell=sh
" set relativenumber
" set smartcase
set noswapfile
set backspace=2
syntax on
set foldmethod=marker
set omnifunc=syntaxcomplete#Complete
set hlsearch
set incsearch
set wildmenu
set guioptions-=r
set guioptions-=L
set guicursor=n-v-c:blinkon0
set scrolloff=999
let mapleader = ","
set splitright
set wildignore=**/*.bak,**/*.pyc,**/*.class,**/node_modules/**,**/dist/**,**/compiled/**,**/docs/**,**/target/**
set wildignore+=**/*.zip,**/*.tar.gz,**/*.tar.bz2,**/*.rar,**/*.tar.xz
set wildignore+=**/vendor/gems/*,**/vendor/cache/*,**/.bundle/*,**/.sass-cache/*
set wildignore+=**/*.o,**/*.out,**/*.obj,**/.git,**/*.rbc,**/*.rbo,**/.svn,**/.gem
set wildignore+=**/.swp,**/*~,**/._*
set noequalalways

" Remove `O` and `o` Delay
set timeout timeoutlen=1000 ttimeoutlen=100
set nopaste
set visualbell

" Search down into subfolders
" Provides tab-completition for all file-related tasks
set path+=**

au BufNewFile,BufRead *.es6 set filetype=es6

highlight OverLength  ctermfg=white guibg=#592929
match OverLength /\%100v.\+/
set colorcolumn=100

command! McopyFilePathToClipboard :redir @* | echo @% | redir END
nnoremap <leader>cf :McopyFilePathToClipboard <CR>

" Delete strings without poluting last yank buffer
nnoremap <leader>d "_d
nnoremap <leader>x "_x
nnoremap <leader>c "_c
nnoremap <leader>dw "_dw
nnoremap <leader>xw "_xw
nnoremap <leader>cw "_cw
nnoremap <leader>de "_de
nnoremap <leader>xe "_xe
nnoremap <leader>ce "_ce

" Copy word under the cursor to clipboard
nnoremap <leader>c viwy

" Lint JS buffers on save.
" au BufWritePost *.js,*.json,*.jsx,*.tsx :call LintBuffer()

" Search for word under cursor.
nnoremap <C-h> :help <C-r><C-w><CR>

function LintBuffer()
  if executable('jshint')
    if filereadable(glob('~/.jshintrc'))
      :call JSHintUpdate()
      execute '!jshint --config ~/.jshintrc'
    else
      :echo 'jshint config "~./.jshintrc" does not exists.'
    endif
  else
    :echo 'jshint is not installed.'
  endif
endfunction

" let g:cssColorVimDoNotMessMyUpdatetime = 1

" noremap <Up> <Nop>
" noremap <Down> <Nop>
" noremap <Left> <Nop>
" noremap <Right> <Nop>

" Remove ex mode
nnoremap Q <nop>

" Show search occourences count in statusbar
" set statusline=%{anzu#search_status()}
" nmap n <Plug>(anzu-n-with-echo)
" nmap N <Plug>(anzu-N-with-echo)
" nmap * <Plug>(anzu-star-with-echo)
" nmap # <Plug>(anzu-sharp-with-echo)
" nmap <Esc><Esc> <Plug>(anzu-clear-search-status)

let g:closetag_filenames = "*.html,*.xhtml,*.phtml"

" ================================================
" Tmux Support
" ================================================

" Write all buffers before navigating from Vim to tmux pane
let g:tmux_navigator_save_on_switch = 2

" ================================================
" VImux - Tmux plugin
" ================================================
" Inspect runner pane
nnoremap <leader>vi :VimuxInspectRunner<cr>

" Zoom the tmux runner pane
nnoremap <leader>vz :VimuxZoomRunner<cr>

" Disable tmux navigator when zooming the Vim pane
" let g:tmux_navigator_disable_when_zoomed = 1

" Change root directory to local file dir
nnoremap <silent> <leader>cd :cd %:p:h<cr>


" ================================================
" Windows & splits manipulaton
" ================================================
"
" easier cycling and delete buffers in current window
nnoremap gb :bn<CR>
nnoremap gp :bp<CR>
nnoremap <silent> <LEADER>gd :bd<CR>

" Toggle horizontal/vertical split
function! ToggleWindowHorizontalVerticalSplit()
  if !exists('t:splitType')
    let t:splitType = 'vertical'
  endif

  if t:splitType == 'vertical' " is vertical switch to horizontal
    windo wincmd K
    let t:splitType = 'horizontal'

  else " is horizontal switch to vertical
    windo wincmd H
    let t:splitType = 'vertical'
  endif
endfunction

nnoremap <silent> <leader>wt :call ToggleWindowHorizontalVerticalSplit()<cr>

function DeleteHiddenBuffers()
  let tpbl=[]
  call map(range(1, tabpagenr('$')), 'extend(tpbl, tabpagebuflist(v:val))')
  for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) && index(tpbl, v:val)==-1')
    silent execute 'bwipeout' buf
  endfor
endfunction

nnoremap <silent> <leader>bw :call DeleteHiddenBuffers()<cr>

" ================================================
" Netrw
" ================================================

let g:netrw_banner = 0 " disable banner
let g:netrw_browse_split = 0 " open in new horizontal split
let g:netrw_altv = 1 " open splits on the right
let g:netrw_liststyle = 3 " tree view
let g:netrw_list_hide = netrw_gitignore#Hide()
let g:netrw_list_hide += ',\(^\|\s\s\)\zs\.\S\+'
let g:netrw_list_hide += ',\.git'
let g:netrw_list_hide += ',\.DS_Store'
let g:netrw_list_hide += ',node_modules'
let g:netrw_list_hide += ',\.gem,\.bundle'
let g:netrw_winsize = 25

nnoremap <leader><F2> :Vexplore<cr>
nnoremap <leader>k :Sexplore<cr>

" ================================================
" Select Mode
" ================================================
" nnoremap § *``gn<C-g>
" inoremap § <C-o>gn<C-g>
" snoremap <expr> . @.

" ================================================
" Search & Replace
" ================================================
" Search for phrase mached in Visual Mode with //
" vnoremap <expr> // 'y/\V'.escape(@",'\').'<CR>'")
" nnoremap * /\<cword
" command! Mdiffoff nnoremap <buffer> ] <nop>|nnoremap <buffer> [ <nop>|diffoff

" goto first editable window
" au VimEnter * :exe "winc l"

" Count occourences of selected text.
nnoremap <leader>* *<C-O>:%s///gn<CR>

" Remove empty lines
command! MremoveEmptyLines g/^\s*$/d

" ================================================
" QuickFix
" ================================================

nnoremap <silent> <leader>q :call QuickfixToggle()<cr>

let g:quickfix_is_open = 0
let g:quickfix_return_to_window = winnr()

function! QuickfixToggle()
  if g:quickfix_is_open
    cclose
    let g:quickfix_is_open = 0
    execute g:quickfix_return_to_window . "wincmd w"
  else
    let g:quickfix_return_to_window = winnr()
    copen
    let g:quickfix_is_open = 1
  endif
endfunction

" ================================================
" Plain Text mode
" ================================================
autocmd FileType text :set syntax=better-writing

" ================================================
" CSSComb
" ================================================
" autocmd FileType css,scss noremap <buffer> <leader>bc :CSScomb<CR>

" ================================================
" Diff
" ================================================
set diffopt+=iwhite

" these two are probably not needed
" command! Mdiffthis nnoremap <buffer> ] ]c|nnoremap <buffer> [ [c|diffthis
" command! Mdiffoff nnoremap <buffer> ] <nop>|nnoremap <buffer> [ <nop>|diffoff

if &diff
  nnoremap <leader>1 :diffget LOCAL<CR>
  nnoremap <leader>2 :diffget BASE<CR>
  nnoremap <leader>3 :diffget REMOTE<CR>
endif

autocmd VimEnter * if &diff | execute 'windo set wrap' | endif
" ================================================
" Snippets
" ================================================
set runtimepath+=~/.vim/my-snippets/
let g:UltiSnipsSnippetsDir = '~/.vim/my_snippets/'
let g:UltiSnipsSnippetDirectories = ['my_snippets']
let g:UltiSnipsEditSplit = 'vertical'

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<C-j>"
let g:UltiSnipsJumpBackwardTrigger="<C-k>"
let g:UltiSnipsListSnippets='<C-tab>'

" let g:SuperTabDefaultCompletionType    = '<C-n>'
" let g:SuperTabCrMapping                = 0
" let g:UltiSnipsExpandTrigger           = '<tab>'
" let g:UltiSnipsJumpForwardTrigger      = '<tab>'
" let g:UltiSnipsJumpBackwardTrigger     = '<s-tab>'
" let g:ycm_key_list_select_completion   = ['<C-j>', '<C-n>', '<Down>']
" let g:ycm_key_list_previous_completion = ['<C-k>', '<C-p>', '<Up>']

" ================================================
" Work with Javascript
" ================================================
let g:tsuquyomi_completion_detail = 1
let g:tsuquyomi_definition_split = 0
let g:tsuquyomi_disable_quickfix = 1
let g:tsuquyomi_javascript_support = 1
let g:tsuquyomi_disable_default_mappings = 1

autocmd FileType typescript,javascript
      \ setlocal completeopt+=preview     |
      \ nnoremap <C-]> :TsuDefinition<CR>

" ================================================
" General Mapings & Ab
" ================================================
" Fix indentation
noremap <leader><F7> mzgg=G`z
" Copy to clipboard
" vnoremap <leader><C-c> :w !pbcopy<CR><CR>
" Paste from clipboard
" noremap <leader><C-v> :r !pbpaste<CR><CR>
" vnoremap <C-c> :w !pbcopy<CR><CR>
" noremap <C-v> :r !pbpaste<CR><CR>
nnoremap j gj
nnoremap k gk

noremap <Up> gk
noremap <Down> gj
ounmap <Up>
ounmap <Down>


" close all buffers except current one
nnoremap <silent> <leader>bd :%bd\|e# <CR>

" Goto local definition and add mark to starting line
nnoremap gd mm gd
" nnoremap gg mm gg
" nnoremap G mm G

" Quick Toggle Background BEtween Dark & Light
nnoremap <leader>Tn :let &background=(&background=="dark"?"light":"dark")<cr>

autocmd BufRead,BufNewFile *.jsx,*.tsx :ia <buffer> </ </<C-X><C-O>>

" ================================================
" Sessions
" ================================================
if has('gui_running')
  set background=dark
  " colorscheme gruvbox
  colorscheme monokai
  " znake, zmrok, wolfpack,
  " Fullscreen mode
  set lines=9999 columns=9999
  " colorscheme monokai
  " set termguicolors
  " " colorscheme darkblue
  " let g:session_autosave = 'yes'
  " let g:session_autoload = 'yes'
else
  " colorscheme phd
  colorscheme monokai
  " let g:session_autosave = 'no'
endif

" ================================================
" EditorConfig
" ================================================
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
let g:EditorConfig_exec_path = '/usr/local/bin/editorconfig'
let g:EditorConfig_core_mode = 'external_command'

" ================================================
" Tagbar
" ================================================
noremap <leader>tb :TagbarToggle<CR>
" ================================================
" NERDTree
" ================================================
" let NERDTreeIgnore = ['cscope.*', '.*\.xd', 'tags', '.DS_Store', '.git', 'node_modules']
" let NERDTreeWinSize = 40
" let NERDTreeShowHidden = 1
"
" " Less verbose NERDTree UI
" let NERDTreeMinimalUI = 1
"
" " Automatically delete buffer of the deleted file from NERDTree
" let NERDTreeAutoDeleteBuffer = 1
"
" let g:nerdtree_tabs_open_on_gui_startup = 2
" let g:nerdtree_tabs_open_on_console_startup = 2
" let g:nerdtree_tabs_focus_on_files = 1
" let g:nerdtree_tabs_autofind = 0
"
" noremap <leader><F2> :NERDTreeFind<CR>
" noremap <leader>k :NERDTreeToggle<CR>

" Jump to other window then NERDTree on VIM enter
" autocmd VimEnter * wincmd p

" Write variable s:std_in if arguments for VIM was passed
" autocmd StdinReadPre * let s:std_in=1

" Open NERDTree if no arguments were passed to VIM and diff mode is off
" autocmd VimEnter * if argc() == 0 && !exists('s:std_in') && !&diff | execute 'windo :NERDTree' | endif

" Close VIM when NERDTree is the last opened window
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" ================================================
" Git - gutter
" ================================================
set updatetime=250
command! -nargs=? MGitBase call SetGitGutterBase(<f-args>)

function SetGitGutterBase(...)
  let g:gitgutter_diff_base = a:0 == 0 ? '' : a:1
  echo 'g:gitgutter_diff_base: ' . g:gitgutter_diff_base
  GitGutter
endfunction

" ================================================
" Session
" ================================================
" function! SaveSess()
"   let filename = getcwd() . '/Session.vim'
"   if filereadable(filename)
"     execute 'mksession! ' . getcwd() . '/Session.vim'
"   endif
" endfunction

" Restore VIM session if ./Session.vim file exists.
function! RestoreSession()
  let filename = getcwd() . '/Session.vim'
  if filereadable(filename)
    execute 'so ' . filename
  endif
endfunction

" autocmd VimLeave * call SaveSess()
autocmd VimEnter * call RestoreSession()

" ================================================
" Git - Fugitive
" ================================================
autocmd QuickFixCmdPost *grep* cwindow

set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P

" ================================================
" Fuzz Search - find any phrase in all files
" ================================================
nnoremap <leader>f :call FuzzSearch()<CR>
vnoremap <leader>f :call FuzzSearchVisual()<CR>

function! FuzzSearch()
  let l:phrase = input('What pattern? ', expand('<cword>'))
  if empty(l:phrase)
    return
  endif

  let l:folder = input('What folder? ')
  if empty(l:folder)
    return
  endif

  call FuzzSearchForPhrase(l:phrase, l:folder)
endfunction

function! FuzzSearchForPhrase(phrase, folder)
  " Create new horizontal split for opening file from results
  silent! exe "new"
  let l:previewWin = winnr()

  " Move new split to the bottom
  silent! exe "normal! \<C-w>J"

  let l:wasNERDTreeOpened = 0

  " Check if NERDTree is opened and close if it is
  if g:NERDTree.IsOpen()
    let l:wasNERDTreeOpened = 1
    exe "NERDTreeClose"
  endif

  exe ":Ack --smart-case '" . a:phrase . "'  '" . a:folder . "'"
  let g:quickfix_is_open = 1

  " Restore nerd tree if was open
  if l:wasNERDTreeOpened
    exe "NERDTree"
    let l:pom = winnr('$') - 1
    exe "normal! " l:pom . "\<C-W>w"
    exe "resize +5"
    exe "normal! " winnr('$') . "\<C-W>w"
  endif
endfunction

function! FuzzSearchVisual()
  let l:phrase = getline("'<")[getpos("'<")[2]-1:getpos("'>")[2]-1]
  let l:folder = input('What folder? ')

  if empty(l:folder)
    let l:folder = '.'
  endif

  call FuzzSearchForPhrase(l:phrase, l:folder)
endfunction

if executable('ag')
  let g:ackprg = 'ag --nogroup --nocolor --column'
  let g:ag_working_path_mode="r"
endif

" ================================================
" ctags
" ================================================
let g:autotagTagsFile="tags"

command! MakeTags !ctags -R .

" ================================================
" CSCOPE - ctags alternative
" ================================================
" if has("cscope")
"   nnoremap <leader>fz :tab :call cscope#findInteractive(expand('<cword>'))<CR>
"   nnoremap <leader>l :call ToggleLocationList()<CR>
"   set csprg=/usr/local/bin/cscope
"   set csto=0
"   set cst
"   set nocsverb
"
"   if filereadable("cscope.out")
"     cs add cscope.out
"   endif
"   set csverb
" endif

" ================================================
" Tabularize
" ================================================
if exists(":Tabularize")
  nnoremap <leader>a= :Tabularize /=<CR>
  vnoremap <leader>a= :Tabularize /=<CR>
  nnoremap <leader>a: :Tabularize /:\zs<CR>
  vnoremap <leader>a: :Tabularize /:\zs<CR>

  " tabularize on every | char
  inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a
  function! s:align()
    let p = '^\s*|\s.*\s|\s*$'
    if getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
      let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
      let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
      Tabularize/|/l1
      normal! 0
      call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
    endif
  endfunction
endif

" ================================================
" CTRLP - find particular file
" ================================================
let g:ctrlp_use_caching = 1
let g:ctrlp_regexp = 1
let g:ctrlp_by_filename = 1
let g:ctrlp_mruf_max = 25
let g:ctrlp_tilde_homedir = 1
let g:ctrlp_mruf_relative = 1
let g:ctrlp_types = ['fil', 'mru', 'buf']
let g:ctrlp_mruf_case_sensitive = 1
let g:ctrlp_mruf_save_on_update = 1
let g:ctrlp_switch_buffer = 'e'
let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]((\.(git|hg|svn))|node_modules|cscope.*|build.*|dist.*)',
      \ 'file': '\v\.(exe|so|dll)$',
      \ 'link': 'SOME_BAD_SYMBOLIC_LINKS'
      \ }

" Search by ctags
nnoremap <leader>p :CtrlP<CR>
nnoremap <leader>r :CtrlP<CR>
nnoremap <leader>t :CtrlPTag<CR>
nnoremap <leader>l :CtrlPMRU<CR>
" nnoremap <leader>q :CtrlPQuickFix<CR>

function! HTMLOpenFunc(action, line)
  if a:action =~ '^[tx]$' && fnamemodify(a:line, ':e') =~? '^html\?$'
    " Get the filename
    let filename = fnameescape(fnamemodify(a:line, ':p'))

    " Close CtrlP
    call ctrlp#exit()

    " Open the file
    if has('mac')
      silent! execute '!open' filename
    else " is Linux
      silent! execute '!xdg-open' filename
    endif
  elseif a:action == 'x' && fnamemodify(a:line, ':e') !~? '^html\?$'
    " Not a HTML file, simulate pressing <c-o> again and wait for new input
    call feedkeys("\<c-o>")

  else
    " Use CtrlP's default file opening function
    call call('ctrlp#acceptfile', [a:action, a:line])
  endif
endfunction

let g:ctrlp_open_func = {'files': 'HTMLOpenFunc'}

" ================================================
" vim-jsbeautify
" ================================================
if has('autocmd')
  if executable('js-beautify')
    augroup Beautify
      autocmd!
      autocmd FileType typescript noremap <buffer> <leader><c-f> :call RangeJsxBeautify()<cr>
      autocmd FileType html noremap <buffer> <leader><c-f> :call RangeHtmlBeautify()<cr>
      autocmd FileType css noremap <buffer> <leader><c-f> :call RangeCSSBeautify()<cr>
      autocmd FileType javascript noremap <buffer> <leader><c-f> :call RangeJsBeautify()<cr>
      autocmd FileType jsx noremap <buffer> <leader><c-f> :call RangeJsxBeautify()<cr>
      autocmd FileType javascript.jsx noremap <buffer> <leader><c-f> :call RangeJsBeautify()<cr>
      autocmd FileType json noremap <buffer> <leader><c-f> :call RangeJsonBeautify()<cr>
    augroup end
  else
    echom "Warrning 'js-beautify' is not installed."
  endif

  " if executable('ack')
  "   augroup Search
  "     autocmd!
  "     autocmd FileType javascript.jsx nnoremap <leader><F3> :execute "Ack '" . expand("<cword>") . "' src" <Bar> cw<CR>
  "     autocmd FileType typescript nnoremap <leader><F3> :execute "Ack '" . expand("<cword>") . "' src" <Bar> cw<CR>
  "   augroup end
  " else
  "   echom "Warning 'ack' is not installed."
  " endif

  if exists('+omnifunc')
    augroup Autocompletion
      autocmd!
      autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    augroup end
  else
    echom "Warning this instalation of VIM doesn't support 'omnifunc'."
  endif
endif

" ================================================
" Templating
" ================================================
" fun! InsertFileManifest(file)
"   if empty(glob(a:file))
"     let cwd = fnamemodify(getcwd(), ':t')
"     let filename = "~/.vim/signatures/" . cwd . ".txt"
"
"     if !empty(glob(filename))
"       exe "-1r " . filename
"       call EvalTemplateVariables()
"     endif
"   endif
" endfun

" fun! EvalTemplateVariables()
"   if line("$") > 20
"     let l = 20
"   else
"     let l = line("$")
"   endif
"   exe "1," . l . "g/<copy-date>/s/<copy-date>/" . strftime("%Y")
" endfun

" fun! MyComment()
"   let l:winview = winsaveview()
"   :go1
"   tcomment#Comment()
"   " call winrestview(l:winview)
"   " let @q ='msgggcc\`s'
"   " @q
" endfun

" autocmd BufFilePre,BufWritePre * ks|call InsertFileManifest(expand('<afile>'))|'s

" fun! ApplySkeletonDevs()
"   let cwd = fnamemodify(getcwd(), ':t')
"   let skeletons_path = "~/.vim/skeletons/"
"   let filename = skeletons_path . cwd
"   if !empty(glob(filename))
"     let g:templates_directory = filename
"
"     " let skeletons = system("ls " . filename)
"     "
"     " for s:item in split(skeletons)
"     "   " echo "autocmd BufNewFile *." . substitute(s:item,'.*\.', '', '') .	"0r skeletons_path" . s:item
"     "   let file_ext = substitute(s:item,'.*\.', '.', '')
"     "   let file_skeleton = join([skeletons_path, s:item])
"     "   let skeleton_ext = substitute(s:item, '.*\.', '.', '')
"     "   " autocmd BufNewFile file_ext	0r file_skeleton
"     "   echo '_' . s:item . '_ file_ext: ' . file_ext . ' skeleton:ext: ' . skeleton_ext
"     "   autocmd BufNewFile *.*	0r call InsertFile(expand('%'), file_skeleton, skeleton_ext)
"     " endfor
"
"     " autocmd BufNewFile  *.c	0r ~/vim/skeleton.c
"     " exe "-1r " . filename
"     " call EvalTemplateVariables()
"   endif
" endfun

" fun! InsertFile(file, skeleton, skeleton_ext)
"   echo '_a:file' . a:file . '_'
"   let file_ext = substitute(a:file, '.*\.', '.', '')
"   if file_ext == a:skeleton_ext
"     :read a:skeleton
"   endif
" endfun

" let g:templates_directory =
let g:username = $USERNAME
let g:email = $EMAIL
let g:license = 'Proprietary'
let g:templates_user_variables = []

if $AOL == 'true'
  let g:templates_directory = '~/.vim/templates/aol/'
else
  let g:templates_directory = '~/.vim/templates/private/'
end

augroup Templating
  autocmd!
  autocmd BufNewFile,BufReadPost * call <SID>TLoad()
augroup END

" call ApplySkeletonDevs()
" autocmd VimEnter * call ApplySkeletonDevs()

function! GetCurrentContent()
  let l:content = getline(0,line("$"))
  let l:result = 0
  for l:temp in l:content
    if strlen(l:temp) > 0
      let l:result = 1
      break
    endif
  endfor
  if l:result == 0
    let l:extension = expand("%:c")
    exe 'Template .' . l:extension
  endif
endfunction
autocmd BufEnter * call GetCurrentContent()

xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>

function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction
